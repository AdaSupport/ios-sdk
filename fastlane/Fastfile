default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

platform :ios do
  desc "Release a new version with a patch bump_type"
  lane :patch do
    release("patch")
  end

  desc "Release a new version with a minor bump_type"
  lane :minor do
    release("minor")
  end

  desc "Release a new version with a major bump_type"
  lane :major do
    release("major")
  end

  lane :closed_beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,            
      duration: 1200,            
      in_house: false
    )
    
    increment_build_number(xcodeproj: "ExampleAppCocoapod.xcodeproj")
    
    cocoapods(
      clean_install: true
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "ExampleAppCocoapod.xcworkspace",
      scheme: "Release",
      silent: true,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./your_app_name.ipa"
    )

    delete_temp_keychain(keychain_name)
  end

  def delete_temp_keychain(name)
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
  end
  
  def create_temp_keychain(name, password)
    create_keychain(
      name: name,
      password: password,
      unlock: false,
      timeout: 0
    )
  end
  
  def ensure_temp_keychain(name, password)
    delete_temp_keychain(name)
    create_temp_keychain(name, password)
  end

  def release(type)
    update_fastlane
    podspecName = "AdaEmbedFramework.podspec"
    ensure_git_branch
    # ensure_git_status_clean
    gym(
      skip_archive: true,
      skip_codesigning: true,
      derived_data_path: "."
    )
    zip(
      path: "Build/Products/Release-iphoneos/AdaEmbedFramework.framework",
      output_path: "AdaEmbedFramework.framework.zip"
    )
    pod_lib_lint
    version = version_get_podspec(path: podspecName)

    github_release = set_github_release(
      repository_name: "adasupport/ios-sdk",
      api_bearer: ENV["FL_GITHUB_RELEASE_API_BEARER"],
      name: "#{version}",
      tag_name: "#{version}",
      description: (File.read("changelog") rescue "No changelog provided"),
      commitish: "master",
      upload_assets: ["AdaEmbedFramework.framework.zip"]
    )
  end
end
